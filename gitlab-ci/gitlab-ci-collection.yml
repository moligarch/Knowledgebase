stages:
  - build
  - test
  - deploy

variables:
  CONFIGURATION:            /p:Configuration=Release    
  DISABLE_VCPKG_MANIFEST:   /p:VcpkgEnableManifest=false    
  SOLUTION:                 ./EdrAgentBuilder.sln           # Adjust the arguments as necessary
  BUILD_PROJECT:            /t:gLib                         # Adjust the arguments as necessary
  TEST_PROJECT:             /t:gLib-Test                    # Adjust the arguments as necessary
  TARGET_PLATFORM_X64:      /p:Platform=x64                 # Adjust the arguments as necessary
  TARGET_PLATFORM_X86:      /p:Platform=x86                 # Adjust the arguments as necessary
  REPORT_PATH_X64:          test_x64_report.xml
  REPORT_PATH_X86:          test_x86_report.xml

# References ===================================================
.TearDown:RevertGitToOrigin:
  script:
    - cd $BUILDER_DIR
    - $projectPath = Join-Path -Path ".\projects" -ChildPath "gLib"
    - |
      Push-Location $projectPath
      try {
          Write-Host "Checking out back to original branch $originalBranch and commit $originalCommitHash..."
          git checkout "$originalBranch"
          git reset --hard "$originalCommitHash"
          
          Write-Host "Successfully checked out back to original branch $originalBranch and commit $originalCommitHash"
      }
      catch {
          Write-Host "An error occurred: $_"
          exit 1
      }
      finally {
          Pop-Location
      }
.Prepare:ProjectGit:
  before_script:
    - $CWD = "$(pwd)"
    - $releaseDir = Join-Path $CWD Build/bin/x86/Release
    - |
      if (-not (Test-Path -Path $releaseDir)) {
        New-Item -ItemType Directory -Force -Path $releaseDir | Out-Null
      }    
    - cd $BUILDER_DIR
    - $projectPath = Join-Path -Path ".\projects" -ChildPath "gLib"
    - |
      if (-not (Test-Path $projectPath)) {
        Write-Host "Project not found at $projectPath"
        exit 1
      }
      Push-Location $projectPath
      try {
        # Store current branch and commit hash
        $originalBranch = git symbolic-ref --short HEAD
        $originalCommitHash = git rev-parse HEAD
        
        Write-Host "Current branch: $originalBranch"
        Write-Host "Current commit hash: $originalCommitHash"
        
        $targetCommitHash = $CI_COMMIT_SHA
        Write-Host "Target commit hash: $targetCommitHash"
        
        # Checkout project to target commit
        Write-Host "Checking out project to commit $targetCommitHash..."
        git checkout $targetCommitHash
        
        Write-Host "Successfully checked out project to commit $targetCommitHash"
      }
      catch {
        Write-Host "An error occurred: $_"
        exit 1
      }
      finally {
        Pop-Location
      }
.Prepare:Builder:
  before_script:
    - $installPath = &(Join-Path ${env:ProgramFiles(x86)} "\Microsoft Visual Studio\Installer\vswhere.exe") -latest -property installationpath
    - Import-Module (Join-Path $installPath "/Common7/Tools/Microsoft.VisualStudio.DevShell.dll")
    - Enter-VsDevShell -VsInstallPath $installPath -SkipAutomaticLocation

.Prepare:TestFilter:
  before_script:
    - echo "Parsing commit message for test specifications..."
    - $TEST_FILTER = & {param([string]$Message) if($Message -match '\[\[(.+)\]\]'){return $Matches[1]}else{return ""}} -Message $CI_COMMIT_MESSAGE
    - if ($TEST_FILTER -eq "skip") {exit 0}
    - echo "Test suite and case extracted:`n$TEST_FILTER"

.Prepare:BuiltItemX64:
  script:
    - |
      $sourcePath = Join-Path -Path $BUILDER_DIR -ChildPath "Build\bin\x64\Release\"
      echo "Source Release Dir= $sourcePath"
      if (-not (Test-Path -Path $sourcePath)) {
        Write-Error "Source path does not exist."
        exit(3)
      }

      $builtItems = Get-ChildItem -Path "$sourcePath\*" -File -Include @("gLib.lib", "gLib.pdb")

.Prepare:BuiltItemX86:
  script:
    - |
      $sourcePath = Join-Path -Path $BUILDER_DIR -ChildPath "Build\bin\x86\Release\"
      echo "Source Release Dir= $sourcePath"
      if (-not (Test-Path -Path $sourcePath)) {
        Write-Error "Source path does not exist."
        exit(3)
      }

      $builtItems = Get-ChildItem -Path "$sourcePath\*" -File -Include @("gLib.lib", "gLib.pdb")

.Prepare:DeployItem:
  before_script:
    - |
    
      # Check if the source path exists
      if (-not (Test-Path -Path $sourcePath)) {
        Write-Error "Source path does not exist."
        exit(3)
      }
      # Ensure DEPLOY_DIR exists
      if (-not (Test-Path -Path $DEPLOY_DIR_TARGET)) {
        New-Item -ItemType Directory -Force -Path $DEPLOY_DIR_TARGET | Out-Null
      }
      # Get all files in the source directory
      $filesToCopy = Get-ChildItem -Path $sourcePath -File

.Rule:PushExceptOnMain:
  rules:
    - if: '$CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH' 
      when: always
      allow_failure: false

.Rule:MergeRequestOnMain:
  rules:
    - if: '$CI_MERGE_REQUEST_TARGET_BRANCH_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
      allow_failure: false

.Rule:MergedToMain:
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"'
      when: manual
# ===================================================

# Builds ===================================================
Build:X64:
  stage: build
  rules:
    - !reference [.Rule:MergedToMain, rules]
  before_script:
    - !reference [.Prepare:Builder, before_script]
    - !reference [.Prepare:ProjectGit, before_script]
  script:
    - echo "Hello, $GITLAB_USER_LOGIN! `nBuild started ..."
    - $CWD = "$(pwd)"
    - echo "Current Working Dir= $CWD"
    - $releaseDir = Join-Path $CWD Build/bin/x64/Release
    - echo "Current Release Dir= $releaseDir"
    - |
      if (-not (Test-Path -Path $releaseDir)) {
        New-Item -ItemType Directory -Force -Path $releaseDir | Out-Null
      }
    - cd $BUILDER_DIR
    - pwd
    - msbuild.exe $SOLUTION $BUILD_PROJECT $CONFIGURATION $TARGET_PLATFORM_X64 $DISABLE_VCPKG_MANIFEST -m
    - !reference [.Prepare:BuiltItemX64, script]
    - |
      foreach ($file in $builtItems) {
        $destinationPath = Join-Path -Path $releaseDir -ChildPath $file.Name;
        echo "Source = $($file.Fullname)";
        echo "Dest= $destinationPath";
        try {
            Copy-Item -Path $file.FullName -Destination $destinationPath -Force;
            Write-Output "Copied $($file.Name) to $releaseDir";
        }
        catch {
            Write-Warning "Failed to copy $($file.Name)= $_"
        }
      }
    - !reference [.TearDown:RevertGitToOrigin, script]
    - cd $CWD
    - pwd
  artifacts:
    when: on_success
    expire_in: 2 days
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-x64"
    paths:
      - Build/bin/x64/Release/gLib.lib
      - Build/bin/x64/Release/gLib.pdb
# ===================================================
Build:X86:
  stage: build
  rules:
    - !reference [.Rule:MergedToMain, rules]
  before_script:
    - !reference [.Prepare:Builder, before_script]
  script:
    - echo "Hello, $GITLAB_USER_LOGIN! `nBuild started ..."
    - msbuild.exe $SOLUTION $BUILD_PROJECT $CONFIGURATION $TARGET_PLATFORM_X86 $DISABLE_VCPKG_MANIFEST -m
    - !reference [.Prepare:BuiltItemX86, script]
    - |
      foreach ($file in $builtItems) {
        $destinationPath = Join-Path -Path $releaseDir -ChildPath $file.Name;
        echo "Source = $($file.Fullname)";
        echo "Dest= $destinationPath";
        try {
            Copy-Item -Path $file.FullName -Destination $destinationPath -Force;
            Write-Output "Copied $($file.Name) to $releaseDir";
        }
        catch {
            Write-Warning "Failed to copy $($file.Name)= $_"
        }
      }
    - cd $CWD
    - pwd
  artifacts:
    when: on_success
    expire_in: 2 days
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-x86"
    paths:
      - Build/bin/x86/Release/gLib.lib
      - Build/bin/x86/Release/gLib.pdb
# ===================================================

# Tests ===================================================
Test:X64:
  stage: test
  rules:
    - !reference [.Rule:PushExceptOnMain, rules]
  before_script:
    - !reference [.Prepare:Builder, before_script]
    - !reference [.Prepare:TestFilter, before_script]
    - echo "Hello, $GITLAB_USER_LOGIN! `nPreparing Tests ..."
    - msbuild.exe $SOLUTION $TEST_PROJECT $CONFIGURATION $TARGET_PLATFORM_X64 $DISABLE_VCPKG_MANIFEST -m
  script:
    - echo "Running x64 tests ..."
    - ./Build/bin/x64/Release/gLib-Test.exe --gtest_filter=$TEST_FILTER --gtest_output="xml:$REPORT_PATH_X64"
    - pwd
  artifacts:
    when: always
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-x64"
    paths:
      - $REPORT_PATH_X64
    reports:
      junit: $REPORT_PATH_X64
# ===================================================
Test:X86:
  stage: test
  rules:
    - !reference [.Rule:PushExceptOnMain, rules]
  before_script:
    - !reference [.Prepare:Builder, before_script]
    - !reference [.Prepare:TestFilter, before_script]
    - echo "Hello, $GITLAB_USER_LOGIN! `nPreparing Tests ..."
    - msbuild.exe $SOLUTION $TEST_PROJECT $CONFIGURATION $TARGET_PLATFORM_X86 $DISABLE_VCPKG_MANIFEST -m
  script:
    - echo "Running x86 tests ..."
    - ./Build/bin/x86/Release/gLib-Test.exe --gtest_filter=$TEST_FILTER --gtest_output="xml:$REPORT_PATH_X86"
    - pwd
  artifacts:
    when: always
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME-x86"
    paths:
      - $REPORT_PATH_X86
    reports:
      junit: $REPORT_PATH_X86
# ===================================================
Test:X64:All:
  stage: test
  rules:
    - !reference [.Rule:MergeRequestOnMain, rules]
  before_script:
    - !reference [.Prepare:Builder, before_script]
    - echo "Hello, $GITLAB_USER_LOGIN! `nPreparing Tests ..."
    - msbuild.exe $SOLUTION $TEST_PROJECT $CONFIGURATION $TARGET_PLATFORM_X64 $DISABLE_VCPKG_MANIFEST -m
  script:
    - echo "Running All tests(x64) ..."
    - ./Build/bin/x64/Release/gLib-Test.exe --gtest_output="xml:$REPORT_PATH_X64"
    - echo "`n=======  x64 Tests completed =======`n"
  artifacts:
    when: always
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
    paths:
      - $REPORT_PATH_X64
    reports:
      junit:
        - $REPORT_PATH_X64
# ===================================================
Test:X86:All:
  stage: test
  rules:
    - !reference [.Rule:MergeRequestOnMain, rules]
  before_script:
    - !reference [.Prepare:Builder, before_script]
    - echo "Hello, $GITLAB_USER_LOGIN! `nPreparing Tests ..."
    - msbuild.exe $SOLUTION $TEST_PROJECT $CONFIGURATION $TARGET_PLATFORM_X86 $DISABLE_VCPKG_MANIFEST -m
  script:
    - echo "Running All tests(x86) ..."
    - ./Build/bin/x86/Release/gLib-Test.exe --gtest_output="xml:$REPORT_PATH_X86"
    - echo "`n=======  x86 Tests completed =======`n"
  artifacts:
    when: always
    name: "$CI_JOB_STAGE-$CI_COMMIT_REF_NAME"
    paths:
      - $REPORT_PATH_X86
    reports:
      junit:
        - $REPORT_PATH_X86
# ===================================================




# Deployments ===================================================
Deploy:X64:
  variables:
    DEPLOY_DIR_TARGET: "${DEPLOY_DIR}/x64"
  dependencies:
    - Build:X64
  needs:
    - job: Build:X64
  stage: deploy
  rules:
    - !reference [.Rule:MergedToMain, rules]
  before_script:
    - $sourcePath = Join-Path -Path (pwd) -ChildPath "Build\bin\x64\Release\"
    - !reference [.Prepare:DeployItem, before_script]
  script:
    - echo "Start Deploying x64 output"
    - |
      
      # Copy files to DEPLOY_DIR_TARGET
      foreach ($file in $filesToCopy) {
        $destinationPath = Join-Path -Path $DEPLOY_DIR_TARGET -ChildPath $file.Name;
        
        try {
            Copy-Item -Path $file.FullName -Destination $destinationPath -Force;
            Write-Output "Copied $($file.Name) to $DEPLOY_DIR_TARGET";
        }
        catch {
            Write-Warning "Failed to copy $($file.Name): $_"
        }
      }
# ===================================================
Deploy:X86:
  variables:
    DEPLOY_DIR_TARGET: "${DEPLOY_DIR}/x86"
  dependencies:
    - Build:X86
  needs:
    - job: Build:X86
  stage: deploy
  rules:
    - !reference [.Rule:MergedToMain, rules]
  before_script:
    - $sourcePath = Join-Path -Path (pwd) -ChildPath "Build\bin\x86\Release\"
    - !reference [.Prepare:DeployItem, before_script]
  script:
    - echo "Start Deploying x86 output"
    - |
      
      # Copy files to DEPLOY_DIR_TARGET
      foreach ($file in $filesToCopy) {
        $destinationPath = Join-Path -Path $DEPLOY_DIR_TARGET -ChildPath $file.Name;
        
        try {
            Copy-Item -Path $file.FullName -Destination $destinationPath -Force;
            Write-Output "Copied $($file.Name) to $DEPLOY_DIR_TARGET";
        }
        catch {
            Write-Warning "Failed to copy $($file.Name): $_"
        }
      }
# ===================================================